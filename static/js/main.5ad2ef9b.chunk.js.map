{"version":3,"sources":["Gallery.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","state","data","fetch","then","response","json","setState","prevState","images","this","map","el","index","key","className","src","download_url","alt","author","concat","swipeable","draggable","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","ssr","infinite","keyBoardControl","customTransition","transitionDuration","containerClass","removeArrowOnDeviceType","deviceType","props","dotListClass","itemClass","slidesToSlide","setdata","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSAiFeA,G,kNA3EXC,MAAQ,CACJC,KAAM,M,kEAGW,IAAD,OAGhBC,MAFY,iCAGPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAF,GACF,EAAKK,UAAS,SAACC,GACX,OAAOA,EAAUN,KAAOA,U,gCAMpC,IAAIO,EAAS,GACb,OAAwB,OAApBC,KAAKT,MAAMC,KAEXO,EAASC,KAAKT,MAAMC,KAAKS,KAAI,SAACC,EAAIC,GAC9B,OAAO,yBAAKC,IAAKD,EAAOE,UAAU,WAC9B,yBAAKC,IAAKJ,EAAGK,aAAcC,IAAKN,EAAGO,aAKpCV,EAAOW,OAAO,yBAAKN,IAAI,KAAT,gC,+BAwBzB,OACI,yBAAKC,UAAU,UACX,kBAAC,IAAD,CACIM,WAAW,EACXC,WAAW,EACXC,WAxBO,CACfC,kBAAmB,CAEfC,WAAY,CAACC,IAAK,IAAMC,IAAK,KAC7BC,MAAO,GAEXC,QAAS,CACLJ,WAAY,CAACC,IAAK,IAAMC,IAAK,MAC7BC,MAAO,GAEXE,OAAQ,CACJL,WAAY,CAACC,IAAK,KAAMC,IAAK,KAC7BC,MAAO,GAEXG,OAAQ,CACJN,WAAY,CAACC,IAAK,IAAKC,IAAK,GAC5BC,MAAO,IASHI,KAAK,EACLC,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,SACjBC,mBAAoB,IACpBC,eAAe,qBACfC,wBAAyB,CAAC,SAAU,UACpCC,WAAY7B,KAAK8B,MAAMD,WACvBE,aAAa,wBACbC,UAAU,8BACVC,cAAe,GAEdjC,KAAKkC,gB,GAvEJC,cCQPC,MARf,WACE,OACE,yBAAK/B,UAAU,OACX,kBAAC,EAAD,QCKYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ad2ef9b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Carousel from 'react-multi-carousel';\nimport 'react-multi-carousel/lib/styles.css';\n\nclass Gallery extends Component {\n\n    state = {\n        data: null\n    };\n\n    componentDidMount() {\n        const url = 'https://picsum.photos/v2/list';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                this.setState((prevState) => {\n                    return prevState.data = data\n                });\n            })\n    }\n\n    setdata() {\n        let images = [];\n        if (this.state.data !== null) {\n\n            images = this.state.data.map((el, index) => {\n                return <div key={index} className=\"img-box\">\n                    <img src={el.download_url} alt={el.author}/>\n                </div>\n            });\n            return images;\n        } else {\n            return images.concat(<div key=\"0\"> Ups! data jest nullem :(</div>)\n        }\n    };\n\n    render() {\n        const responsive = {\n            superLargeDesktop: {\n                // the naming can be any, depends on you.\n                breakpoint: {max: 4000, min: 3000},\n                items: 5\n            },\n            desktop: {\n                breakpoint: {max: 3000, min: 1024},\n                items: 3\n            },\n            tablet: {\n                breakpoint: {max: 1024, min: 464},\n                items: 2\n            },\n            mobile: {\n                breakpoint: {max: 464, min: 0},\n                items: 1\n            }\n        };\n        return (\n            <div className=\"center\">\n                <Carousel\n                    swipeable={true}\n                    draggable={false}\n                    responsive={responsive}\n                    ssr={true} // means to render carousel on server-side.\n                    infinite={true}\n                    keyBoardControl={true}\n                    customTransition=\"all .5\"\n                    transitionDuration={500}\n                    containerClass=\"carousel-container\"\n                    removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n                    deviceType={this.props.deviceType}\n                    dotListClass=\"custom-dot-list-style\"\n                    itemClass=\"carousel-item-padding-40-px\"\n                    slidesToSlide={3}\n                >\n                    {this.setdata()}</Carousel>\n            </div>\n        );\n    }\n}\n\nexport default Gallery;","import React from 'react';\nimport './App.css';\nimport Gallery from './Gallery.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Gallery/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}